openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/appointments/{id}/update_appointment/:
    put:
      operationId: appointments_update_appointment_update
      description: Update an appointment by ID.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - appointments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Appointment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Appointment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/appointments/create_appointment/:
    post:
      operationId: appointments_create_appointment_create
      description: Create a new appointment with user details and selected services.
      tags:
      - appointments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AppointmentCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AppointmentCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentCreate'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/appointments/list_appointments/:
    get:
      operationId: appointments_list_appointments_list
      description: Retrieve all appointments for a specific user. If no user_id is
        provided, fetch appointments for the authenticated user.
      tags:
      - appointments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
          description: ''
  /api/appointments/validate_coupon/:
    post:
      operationId: appointments_validate_coupon_create
      description: |-
        Validate a coupon and calculate the discounted price for the services in the cart.

        Expected request data:
        {
            "services": [...],  # List of service IDs
            "coupon_code": "OPTIONAL_COUPON_CODE"
        }
      tags:
      - appointments
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/login/:
    post:
      operationId: auth_login_create
      description: Log in a user and return JWT tokens along with user details.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
            examples:
              LoginRequest:
                value:
                  email: example@example.com
                  password: password123
                summary: Login Request
              LoginResponse:
                value:
                  access_token: example_access_token
                  refresh_token: example_refresh_token
                  user:
                    id: 1
                    email: example@example.com
                    first_name: John
                    last_name: Doe
                    user_role: user
                    created_at: '2024-11-27T12:34:56Z'
                summary: Login Response
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                LoginResponse:
                  value:
                    access_token: example_access_token
                    refresh_token: example_refresh_token
                    user:
                      id: 1
                      email: example@example.com
                      first_name: John
                      last_name: Doe
                      user_role: user
                      created_at: '2024-11-27T12:34:56Z'
                  summary: Login Response
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      description: Log out a user by blacklisting the refresh token.
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/auth/me/:
    get:
      operationId: auth_me_retrieve
      description: Retrieve the authenticated user's details.
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/auth/password_reset/:
    post:
      operationId: auth_password_reset_create
      description: Request a password reset link.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/auth/password_reset_confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: Confirm password reset and update the password.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/auth/register/:
    post:
      operationId: auth_register_create
      description: Register a new user with email, password, and other details.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/auth/update_user_info/:
    put:
      operationId: auth_update_user_info_update
      description: Update the user's first and last name.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/cash/create_cash_payment/:
    post:
      operationId: cash_create_cash_payment_create
      description: Create a cash payment for an appointment
      tags:
      - cash
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CashPaymentCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CashPaymentCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CashPaymentCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashPaymentCreate'
          description: ''
  /api/google/:
    post:
      operationId: google_create
      description: Handle Google sign-in by verifying the token and issuing a JWT
        token.
      tags:
      - google
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/paypal/create_payment/:
    post:
      operationId: paypal_create_payment_create
      description: Create a PayPal payment
      tags:
      - paypal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayPalPaymentCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayPalPaymentCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayPalPaymentCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayPalPaymentCreate'
          description: ''
  /api/paypal/execute_payment/:
    post:
      operationId: paypal_execute_payment_create
      description: Execute a PayPal payment
      tags:
      - paypal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayPalPaymentExecute'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayPalPaymentExecute'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayPalPaymentExecute'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayPalPaymentExecute'
          description: ''
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/service/:
    get:
      operationId: service_list
      description: Retrieve a paginated list of available services.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedServiceList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/service/{id}/:
    get:
      operationId: service_retrieve
      description: Retrieve the details of a specific service by its ID.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this service.
        required: true
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    Appointment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        appointment_time:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/StatusEnum'
        coupon:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        price_breakdown:
          type: object
          additionalProperties: {}
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        coupon_code:
          type: string
          writeOnly: true
          nullable: true
        payment_method:
          type: string
          nullable: true
          readOnly: true
      required:
      - appointment_time
      - coupon
      - created_at
      - id
      - payment_method
      - price_breakdown
      - services
      - status
      - total_price
      - user
    AppointmentCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        services:
          type: array
          items:
            type: integer
        appointment_time:
          type: string
          format: date-time
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          default: pending
        coupon:
          type: integer
          nullable: true
      required:
      - appointment_time
      - id
      - services
      - user
    CashPaymentCreate:
      type: object
      properties:
        appointment_id:
          type: integer
      required:
      - appointment_id
    ErrorResponse:
      type: object
      description: Serializer for standardizing the error response format.
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          additionalProperties:
            type: string
        status_code:
          type: integer
      required:
      - data
      - message
      - status_code
      - success
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    PaginatedServiceList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Service'
    PasswordReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      properties:
        password:
          type: string
          writeOnly: true
          minLength: 8
        token:
          type: string
          writeOnly: true
      required:
      - password
      - token
    PayPalPaymentCreate:
      type: object
      description: Serializer for creating a PayPal payment
      properties:
        appointment_id:
          type: integer
          description: The ID of the appointment for which the payment is being made
        currency:
          type: string
          default: USD
          description: 'The currency for the payment (default: USD)'
          maxLength: 3
      required:
      - appointment_id
    PayPalPaymentExecute:
      type: object
      description: Serializer for executing a PayPal payment
      properties:
        payment_id:
          type: string
          description: The PayPal payment ID
        payer_id:
          type: string
          description: The PayPal payer ID
      required:
      - payer_id
      - payment_id
    Register:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        user_role:
          $ref: '#/components/schemas/UserRoleEnum'
      required:
      - email
      - password
      - password2
    Service:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        service_name:
          type: string
          maxLength: 255
        description:
          type: string
        duration:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          description: Duration in minutes
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        service_image_url:
          type: string
          nullable: true
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - description
      - duration
      - id
      - price
      - service_image_url
      - service_name
      - updated_at
    StatusEnum:
      enum:
      - confirmed
      - pending
      - canceled
      - completed
      type: string
      description: |-
        * `confirmed` - Confirmed
        * `pending` - Pending
        * `canceled` - Canceled
        * `completed` - Completed
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        user_role:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - email
      - id
    UserRoleEnum:
      enum:
      - 1
      - 2
      type: integer
      description: |-
        * `1` - Staff
        * `2` - Customer
    UserUpdate:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
      required:
      - first_name
      - last_name
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
